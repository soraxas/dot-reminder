#!/usr/bin/python

import os, sys
import argparse
import subprocess
import main

def handle_args():
    import xdg.BaseDirectory
    config_default = "{}/dot_reminder.cfg".format(xdg.BaseDirectory.xdg_config_home)
    parser = argparse.ArgumentParser(
        description="Inform you what files you can potentially backup.")
    parser.add_argument(
        "--config",
        "-c",
        default=config_default,
        help=
        "Configuration file to define the behaviour of this program. [default: {}]".format(config_default),
        metavar="CONFIG_FILE")
    parser.add_argument(
        "--minimal",
        "-m",
        action='store_true',
        default=False,
        help="Minimal in verbosity. If set, it will only output directory that "
        "are backup-able. It overrides verbosity option.")
    parser.add_argument(
        "--force-update-mackup-configs",
        action='store_true',
        default=False,
        help="Remove existing mackup configs, and download the latest one.")
    parser.add_argument(
        "--verbosity",
        "-v",
        action='count',
        default=0,
        help="Verbosity of the program. "
        "Lvl 0: Informs when there are files backup-able. "
        "Lvl 1: Previous, plus when the file exists (already backup-ed). "
        "Lvl 2: Previous, plus even when the file does not exists. "
        "Lvl 3: Previous, plus all other instances (includes apps that you might not installed)"
    )
    parser.add_argument(
        "--debug",
        action='store_true',
        default=False,
        help="Enable extensive logging.")

    return vars(parser.parse_args())


def mackup_configs_download_helper():
    """Check and help to download basic config files from mackup repo."""
    if os.path.exists('applications'):
        return
    print('Default configs from mackup not found.')
    if sys.version_info < (3, 0):  # special handling for python2
        input = raw_input
    else:
        from builtins import input
    prompt = input("Do you want to automatically download them? (Y/n) ")
    if prompt.lower() == 'y' or prompt == '':
        import shutil

        download_url = "https://github.com/lra/mackup/archive/master.tar.gz"
        tarball_name = 'master.tar.gz'
        mackup_repo_directory = 'mackup-master'
        # download master tarball
        subprocess.check_output(['wget', download_url])

        subprocess.check_output(['tar', 'xzf', tarball_name, mackup_repo_directory])
        shutil.move(os.path.join(mackup_repo_directory, 'mackup', 'applications'), os.getcwd())

        # cleanup
        shutil.rmtree(mackup_repo_directory)
        os.remove(tarball_name)


def xdg_util_download_helper():
    """Check and help to download xdg python module."""
    try:
        import xdg
        return
    except ModuleNotFoundError:
        pass
    print('Python module "xdg" not found (https://github.com/takluyver/pyxdg).')
    if sys.version_info < (3, 0):  # special handling for python2
        input = raw_input
    else:
        from builtins import input
    prompt = input("Do you want to automatically download the module locally? (Y/n) ")
    if prompt.lower() == 'y' or prompt == '':
        import shutil

        download_url = "https://github.com/takluyver/pyxdg/archive/master.tar.gz"
        tarball_name = 'master.tar.gz'
        xdg_repo_directory = 'pyxdg-master'
        # download master tarball
        subprocess.check_output(['wget', download_url])

        subprocess.check_output(['tar', 'xzf', tarball_name, xdg_repo_directory])
        shutil.move(os.path.join(xdg_repo_directory, 'xdg'), os.getcwd())

        # cleanup
        shutil.rmtree(xdg_repo_directory)
        os.remove(tarball_name)


if __name__ == '__main__':
    os.chdir(sys.path[0])
    mackup_configs_download_helper()
    xdg_util_download_helper()
    args = handle_args()

    if args['force_update_mackup_configs']:
        import shutil
        shutil.rmtree('applications')
        mackup_configs_download_helper()
    else:
        main.main(args)
